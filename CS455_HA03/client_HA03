import socket
import os
import threading

def file_to_server(server_socket, filepath):
    if os.path.exists(filepath):
        server_socket.send('file_transfer'.encode('utf-8'))
        filename = os.path.basename(filepath)
        server_socket.send(filename.encode('utf-8'))
        filesize = os.path.getsize(filepath)
        server_socket.send(str(filesize).encode('utf-8'))

        with open(filepath, 'rb') as file:
            bytes_sent = 0
            while bytes_sent < filesize:
                data = file.read(1024)
                server_socket.send(data)
                bytes_sent += len(data)

        print(f"{filename} sent successfully")
    else:
        print("Error: File does not exist")
        
def receive_file(server_socket):
    filename = server_socket.recv(1024).decode('utf-8').strip()
    filesize = int(server_socket.recv(1024).decode('utf-8').strip())

    with open(filename, 'wb') as file:
        print(f"Receiving file: {filename} ({filesize} bytes)")
        bytes_received = 0
        while bytes_received < filesize:
            data = server_socket.recv(1024)
            file.write(data)
            bytes_received += len(data)
    
    print(f"{filename} received successfully")
    
def send_messages(server_socket):
    while True:
        client_message = input("Client: ")
        if client_message.lower() == "close":
            server_socket.send("close".encode('utf-8'))
            break
        elif client_message.startswith("share"):
            _, filepath = client_message.split(maxsplit=1)
            file_to_server(server_socket, filepath)
        else:
            server_socket.send(client_message.encode('utf-8'))

def receive_messages(server_socket):
    while True:
        try:
            server_message = server_socket.recv(1024).decode('utf-8')

            if server_message.lower() == "close":
                print("Server disconnected.")
                break
            elif server_message.lower() == "file_transfer":
                receive_file(server_socket)
            else:
                print(f"\nFrom Server: {server_message}")
                print("Client: ", end="", flush=True)
        except ConnectionError:
            break

def run_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_ip = "127.0.0.1"
    port = 8000
    client_socket.connect((server_ip, port))
    
    threading.Thread(target=receive_messages, args=(client_socket,)).start()
    threading.Thread(target=send_messages, args=(client_socket,)).start()

run_client()